import psutil
import tkinter as tk
from tkinter import ttk, messagebox
import threading
import time
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Function to fetch running processes
def get_processes():
    process_list = []
    for proc in psutil.process_iter(attrs=['pid', 'name', 'cpu_percent', 'memory_info']):
        try:
            info = proc.info
            info['memory_info'] = info['memory_info'].rss // 1024**2  # Convert bytes to MB
            process_list.append(info)
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return process_list

# Function to update process list in GUI
def update_process_list():
    for row in tree.get_children():
        tree.delete(row)  # Clear old data

    processes = get_processes()
    for process in processes:
        tree.insert("", "end", values=(
            process['pid'], process['name'], process['cpu_percent'], process['memory_info']
        ))

    root.after(3000, update_process_list)  # Update every 3 seconds

# Function to terminate a process
def kill_process():
    selected_item = tree.selection()
    if not selected_item:
        messagebox.showwarning("Warning", "Select a process first!")
        return

    pid = tree.item(selected_item)['values'][0]
    process_name = tree.item(selected_item)['values'][1]

    # Check if it's a system process
    system_processes = ["winlogon.exe", "csrss.exe", "smss.exe", "svchost.exe", "System", "explorer.exe"]
    if process_name.lower() in system_processes:
        messagebox.showwarning("Warning", f"{process_name} is a system process. Termination not allowed!")
        return

    try:
        process = psutil.Process(pid)
        process.terminate()
        messagebox.showinfo("Success", f"Process {process_name} (PID: {pid}) terminated!")
        update_process_list()
    except Exception as e:
        messagebox.showerror("Error", f"Failed to terminate process (pid={pid}): {e}")

# Function to update the memory graph
def update_graph():
    while True:
        mem_usage.append(psutil.virtual_memory().percent)

        if len(mem_usage) > 50:  # Keep only last 50 data points
            mem_usage.pop(0)

        ax.clear()
        ax.plot(mem_usage, color="blue", linewidth=2)
        ax.set_ylim(0, 100)  # Set Y-axis limit from 0 to 100%
        ax.set_title("Real-time Memory Utilization", fontsize=14, fontweight="bold")
        ax.set_ylabel("Memory Usage (%)", fontsize=12)
        ax.set_xlabel("Time (seconds)", fontsize=12)
        ax.grid(True)

        canvas.draw()
        time.sleep(1)  # Update every 1 second for smooth graph

# Create GUI Window
root = tk.Tk()
root.title("Process Manager & Memory Usage")
root.geometry("900x500")
root.configure(bg="white")

# Create Process Table
columns = ("PID", "Name", "CPU%", "Memory (MB)")
tree = ttk.Treeview(root, columns=columns, show="headings", height=15)

for col in columns:
    tree.heading(col, text=col, anchor="center")
    tree.column(col, anchor="center", width=200)

tree.pack(fill="x", padx=10, pady=10)

# Buttons
btn_frame = tk.Frame(root, bg="white")
btn_frame.pack(pady=5)

kill_btn = tk.Button(btn_frame, text="Kill Process", command=kill_process, bg="red", fg="white",
                     font=("Arial", 14, "bold"), padx=10, pady=5)
kill_btn.pack(side="left", padx=5)

# Graph setup
fig, ax = plt.subplots(figsize=(6, 3))
canvas = FigureCanvasTkAgg(fig, master=root)
canvas.get_tk_widget().pack()

mem_usage = []

# Start process list update and graph update
update_process_list()
threading.Thread(target=update_graph, daemon=True).start()

# Run the GUI
root.mainloop()
